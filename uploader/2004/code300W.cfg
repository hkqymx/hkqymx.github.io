; CODE300W CONFIGURATION FILE

; A semicolon in the first postion of a line will mark it as comment.
; Parameter values should immediately follow the equal-sign without (white-)space(s).



; Samplebuffersize defines the size of the buffer where the audio samples are stored for proccessing
; The sample buffersize equals the value times 64kb. A value of 4 will give you a buffersize of 256 kb.
; The value is internally limited to 160 * 64kb, with a minimum of 2 * 64kb.     

SAMPLE_BUFFER_SIZE=16


; Ip_file defines the file to look for at start-up, containing the IP for a pre-defined start-up mode.
; Failing to find the file or finding an invalid IP in this file, will start the decoder in
; the IDLE-mode. Longfilenames are permitted.

;IP_FILE=baudot.IP


; Dir_Rec defines the (sub-)directory where the decoder output will be stored for retrieval
; at a convenient time. Longpathnames are permitted. Dir_Rec defaults to .\DATA\

DIR_REC=DATA_AND_AUDIO_FILES


; Data_Header defines whether or not to store additional information in decoder output files
; valid options are <YES | NO>

DATA_HEADER=YES

; Save_unicode defines the way decoded output is saved to disk
; valid options are <YES | NO>
; YES = store in unicode format
; No  = store in ascii format

SAVE_UNICODE=NO

; Decoder_number defines the number the decoder will be known under.
; There is still need to assign a unique number to a decoders, even though decoders are assigned
; different IP-addresses. The number will be used to quickly identify a decoder by the operator
; and to identify the origin of data send over the data port to the operator. This number will be
; displayed in the decoder window. Three digit numbers are permitted, excluding the number 000
DECODER_NUMBER=120


; Code30_serverport defines the server port for the client to address, in order to acquire a connection
; to a decoder. The number of connections the server will accept is limited to 1.

CODE30_SERVERPORT=1234


; Remote_Data_IP_Address defines the remote IP address the decoder will, when requested, send it's data to.

REMOTE_DATA_IP_ADDRESS=192.100.0.0



; Remote_Data_Port defines the remote UDP port on Remote_Data_IP, the decoder data is send to.

REMOTE_DATA_PORT=12001


; Remote_Monitor_IP_Address defines the remote IP address the decoder will, when requested, send it's monitor data to.
; Not necessarily the same as REMOTE_DATA_IP_ADDRESS

REMOTE_MONITOR_IP_ADDRESS=192.100.0.0



; Remote_monitor_port defines the remote UDP port on Remote_Data_IP, the decoder status and
; assorted information will be send to.

REMOTE_MONITOR_PORT=1400


; InhibitSpectrumDraw prevents the spectrum from being drawn on screen to minimize the network
; traffic generated by PC-ANYWHERE. The spectrum is still calculated and available via the
; send_spectrum_on command.
; valid options are <YES | NO>

INHIBIT_SPECTRUM_DRAW=NO


; MaxAudioFileSize defines the maximum size of an audio file in MBytes. Should a file, while recording, become
; larger than this maximum size, it is stored in chunks of MaxAudioFileSize. Files belonging to the same recording
; are identified by a common part in their filenames followed by the text 'part_xxx'. After a chunk is written to
; disk, a message 'FilesClosed' is sent.
; Values ranging from 1 to 999 are considered valid.
; The internal default value is 999

MAX_AUDIO_FILE_SIZE=5


; Production mode changes the look of decoder modes.
; valid options are <YES | NO>

PRODUCTION_MODE=YES

; SendSpectrum defines whether the application should start sending spectrum values immediately after startup.
; It will continue to do so, until a SendSpectrumOff command is received
; Valid options are <YES | NO>

SEND_SPECTRUM=NO


; SendSpectrumInterval defines the time between updates of the spectrum values in tenth of seconds.
; Internal default is 100 meaning an interval length of 10 seconds.
; Values ranging from 1 to 999 are permitted.

SEND_SPECTRUM_INTERVAL=10


; SendIP defines whether the application should start sending IP's immediately after startup.
; It will continue to do so, until a SendIPOff command is received
; valid options are <YES | NO>

SEND_IP=NO


; SendIPInterval defines the time between the transmissions of IP's, in tenth of seconds.
; Internal default is 100 meaning an interval length of 10 seconds.
; Values ranging from 1 to 999 are considered valid.

SEND_IP_INTERVAL=10


; SendStatus defines whether the application should start sending status changes immediately after startup.
; It will continue to do so, until a SendStatusOff command is received
; valid options are <YES | NO>

SEND_STATUS=NO


; DataNetOn defines whether the application should start sending data immediately after starting a decoder.
; It will continue to do so, until a DataNetOff command is received
; valid options are <YES | NO>

DATA_NET_ON=NO


; CenterFrequency defines the default center frequency after starting the application.
; Too large or too small a value will be corrected in the application, the internal default is 1900.

CENTER_FREQUENCY=1900


; StartMonoAudio defines, at start-up, whether CODE300 uses only the left audio channel for decoding and storing
; audio samples. Default value = NO.
; A YES value will therefore conserve diskspace while recording.
; A NO value will give you 2 independent decoding channels; 
; valid options are <YES | NO>
; not valid in a MONO version of CODE300-32

START_MONO_AUDIO=NO







;EXT_CLASSIFIER_TABLE=NO

